// Generated by CoffeeScript 1.12.6
var Button, ButtonGroup, Col, EmailWhitelistItem, Glyphicon, GroupEmailWhitelist, GroupManagement, GroupOptions, Input, ListGroup, ListGroupItem, MemberInvitePanel, MemberManagement, MemberManagementItem, Panel, Row, TabPane, TabbedArea, TeacherManagement, update;

Input = ReactBootstrap.Input;

Row = ReactBootstrap.Row;

Col = ReactBootstrap.Col;

Button = ReactBootstrap.Button;

ButtonGroup = ReactBootstrap.ButtonGroup;

Panel = ReactBootstrap.Panel;

ListGroup = ReactBootstrap.ListGroup;

ListGroupItem = ReactBootstrap.ListGroupItem;

Glyphicon = ReactBootstrap.Glyphicon;

TabbedArea = ReactBootstrap.TabbedArea;

TabPane = ReactBootstrap.TabPane;

update = React.addons.update;

MemberManagementItem = React.createClass({displayName: "MemberManagementItem",
  removeTeam: function() {
    return apiCall("POST", "/api/group/teacher/leave", {
      gid: this.props.gid,
      tid: this.props.tid
    }).done((function(resp) {
      apiNotify(resp);
      return this.props.refresh();
    }).bind(this));
  },
  switchUserRole: function(tid, role) {
    return apiCall("POST", "/api/group/teacher/role_switch", {
      gid: this.props.gid,
      tid: tid,
      role: role
    }).done((function(resp) {
      apiNotify(resp);
      return this.props.refresh();
    }).bind(this));
  },
  render: function() {
    var switchUser, userButton;
    if (this.props.teacher) {
      userButton = React.createElement(Button, {
        "bsStyle": "success",
        "className": "btn-sq"
      }, React.createElement(Glyphicon, {
        "glyph": "user",
        "bsSize": "large"
      }), React.createElement("p", {
        "className": "text-center"
      }, "Teacher"));
    } else {
      userButton = React.createElement(Button, {
        "bsStyle": "primary",
        "className": "btn-sq"
      }, React.createElement(Glyphicon, {
        "glyph": "user",
        "bsSize": "large"
      }), React.createElement("p", {
        "className": "text-center"
      }, "User"));
    }
    if (this.props.teacher) {
      switchUser = React.createElement(Button, {
        "onClick": this.switchUserRole.bind(null, this.props.tid, "member")
      }, "Make Member");
    } else {
      switchUser = React.createElement(Button, {
        "onClick": this.switchUserRole.bind(null, this.props.tid, "teacher")
      }, "Make Teacher");
    }
    return React.createElement(ListGroupItem, null, React.createElement(Row, null, React.createElement(Col, {
      "xs": 2
    }, userButton), React.createElement(Col, {
      "xs": 6
    }, React.createElement("h4", null, this.props.team_name), React.createElement("p", null, React.createElement("strong", null, "Affiliation:"), " ", this.props.affiliation)), React.createElement(Col, {
      "xs": 4
    }, React.createElement(ButtonGroup, {
      "vertical": true
    }, switchUser, React.createElement(Button, {
      "onClick": this.removeTeam
    }, "Remove User")))));
  }
});

MemberInvitePanel = React.createClass({displayName: "MemberInvitePanel",
  mixins: [React.addons.LinkedStateMixin],
  propTypes: {
    gid: React.PropTypes.string.isRequired
  },
  getInitialState: function() {
    return {
      role: "member"
    };
  },
  inviteUser: function(e) {
    e.preventDefault();
    return apiCall("POST", "/api/group/invite", {
      gid: this.props.gid,
      email: this.state.email,
      role: this.state.role
    }).done((function(resp) {
      apiNotify(resp);
      this.setState(update(this.state, {
        $set: {
          email: ""
        }
      }));
      return this.props.refresh();
    }).bind(this));
  },
  render: function() {
    return React.createElement(Panel, null, React.createElement("form", {
      "onSubmit": this.inviteUser
    }, React.createElement(Col, {
      "xs": 8
    }, React.createElement(Input, {
      "type": "email",
      "label": "E-mail",
      "valueLink": this.linkState("email")
    })), React.createElement(Col, {
      "xs": 4
    }, React.createElement(Input, {
      "type": "select",
      "label": "Role",
      "placeholder": "Member",
      "valueLink": this.linkState("role")
    }, React.createElement("option", {
      "value": "member"
    }, "Member"), React.createElement("option", {
      "value": "teacher"
    }, "Teacher"))), React.createElement(Col, {
      "xs": 4
    }, React.createElement(Button, {
      "onClick": this.inviteUser
    }, "Invite User"))));
  }
});

MemberManagement = React.createClass({displayName: "MemberManagement",
  render: function() {
    var allMembers, memberInformation;
    allMembers = update(this.props.teacherInformation, {
      $push: this.props.memberInformation
    });
    allMembers = _.filter(allMembers, (function(member) {
      return this.props.currentUser["tid"] !== member["tid"];
    }).bind(this));
    memberInformation = React.createElement(ListGroup, null, allMembers.map((function(member, i) {
      return React.createElement(MemberManagementItem, Object.assign({
        "key": i,
        "gid": this.props.gid,
        "refresh": this.props.refresh
      }, member));
    }).bind(this)));
    return React.createElement("div", null, React.createElement("h4", null, "User Management"), React.createElement(MemberInvitePanel, {
      "gid": this.props.gid,
      "refresh": this.props.refresh
    }), memberInformation);
  }
});

GroupManagement = React.createClass({displayName: "GroupManagement",
  getInitialState: function() {
    return {
      name: "",
      settings: {
        email_filter: [],
        hidden: false
      },
      member_information: [],
      teacher_information: [],
      current_user: {}
    };
  },
  componentWillMount: function() {
    return this.refreshSettings();
  },
  refreshSettings: function() {
    apiCall("GET", "/api/group/settings", {
      gid: this.props.gid
    }).done((function(resp) {
      return this.setState(update(this.state, {
        $merge: resp.data
      }));
    }).bind(this));
    apiCall("GET", "/api/user/status").done((function(resp) {
      this.setState(update(this.state, {
        current_user: {
          $set: resp.data
        }
      }));
      if (!resp.data["teacher"] || (window.userStatus && !window.userStatus.teacher)) {
        return apiNotify({
          status: 1,
          message: "You are no longer a teacher."
        }, "/profile");
      }
    }).bind(this));
    apiCall("GET", "/api/group/member_information", {
      gid: this.props.gid
    }).done((function(resp) {
      return this.setState(update(this.state, {
        member_information: {
          $set: resp.data
        }
      }));
    }).bind(this));
    return apiCall("GET", "/api/group/teacher_information", {
      gid: this.props.gid
    }).done((function(resp) {
      return this.setState(update(this.state, {
        teacher_information: {
          $set: resp.data
        }
      }));
    }).bind(this));
  },
  pushUpdates: function(modifier) {
    var data;
    data = this.state;
    if (modifier) {
      data.settings = modifier(data.settings);
    }
    return apiCall("POST", "/api/group/settings", {
      gid: this.props.gid,
      settings: JSON.stringify(data.settings)
    }).done((function(resp) {
      apiNotify(resp);
      return this.refreshSettings();
    }).bind(this));
  },
  render: function() {
    return React.createElement("div", null, React.createElement(Col, {
      "xs": 6
    }, React.createElement(MemberManagement, {
      "teacherInformation": this.state.teacher_information,
      "currentUser": this.state.current_user,
      "memberInformation": this.state.member_information,
      "gid": this.props.gid,
      "refresh": this.refreshSettings
    })), React.createElement(Col, {
      "xs": 6
    }, React.createElement(GroupOptions, {
      "pushUpdates": this.pushUpdates,
      "settings": this.state.settings,
      "gid": this.props.gid
    }), React.createElement(GroupEmailWhitelist, {
      "emails": this.state.settings.email_filter,
      "pushUpdates": this.pushUpdates,
      "gid": this.props.gid
    })));
  }
});

GroupOptions = React.createClass({displayName: "GroupOptions",
  propTypes: {
    settings: React.PropTypes.object.isRequired,
    pushUpdates: React.PropTypes.func.isRequired,
    gid: React.PropTypes.string.isRequired
  },
  promptGroupHide: function() {
    return window.confirmDialog("Hiding your group from the scoreboard is an irrevocable change. You won't be able to change this later.", "Hidden Group Change", "Okay", "Cancel", (function() {
      return this.props.pushUpdates((function(data) {
        return update(data, {
          hidden: {
            $set: true
          }
        });
      }));
    }).bind(this, function() {
      return false;
    }));
  },
  render: function() {
    var hiddenGroupDisplay;
    if (this.props.settings.hidden) {
      hiddenGroupDisplay = React.createElement("p", null, "This group is ", React.createElement("b", null, "hidden"), " from the general scoreboard.");
    } else {
      hiddenGroupDisplay = React.createElement("p", null, "This group is ", React.createElement("b", null, "visible"), " on the scoreboard.\nClick ", React.createElement("a", {
        "href": "#",
        "onClick": this.promptGroupHide
      }, "here"), " to hide it.");
    }
    return React.createElement("div", null, React.createElement("h4", null, "Group Options"), React.createElement(Panel, null, React.createElement("form", null, hiddenGroupDisplay)));
  }
});

EmailWhitelistItem = React.createClass({displayName: "EmailWhitelistItem",
  propTypes: {
    email: React.PropTypes.string.isRequired,
    pushUpdates: React.PropTypes.func.isRequired
  },
  render: function() {
    var removeEmail;
    removeEmail = this.props.pushUpdates.bind(null, (function(data) {
      return update(data, {
        email_filter: {
          $apply: _.partial(_.without, _, this.props.email)
        }
      });
    }).bind(this));
    return React.createElement(ListGroupItem, null, "*@", this.props.email, React.createElement("span", {
      "className": "pull-right"
    }, React.createElement(Glyphicon, {
      "glyph": "remove",
      "onClick": removeEmail
    })));
  }
});

GroupEmailWhitelist = React.createClass({displayName: "GroupEmailWhitelist",
  mixins: [React.addons.LinkedStateMixin],
  getInitialState: function() {
    return {};
  },
  propTypes: {
    pushUpdates: React.PropTypes.func.isRequired,
    emails: React.PropTypes.array.isRequired,
    gid: React.PropTypes.string.isRequired
  },
  addEmailDomain: function(e) {
    e.preventDefault();
    if (_.indexOf(this.props.emails, this.state.emailDomain) !== -1) {
      return apiNotify({
        status: 0,
        message: "This email domain has already been whitelisted."
      });
    } else if (_.indexOf(this.state.emailDomain, "@") !== -1) {
      return apiNotify({
        status: 0,
        message: "You should not include '@'. I want the email domain that follows '@'."
      });
    } else if (_.indexOf(this.state.emailDomain, ".") === -1) {
      return apiNotify({
        status: 0,
        message: "Your email domain did not include a '.' as I expected. Please make sure this is an email domain."
      });
    } else {
      return this.props.pushUpdates((function(data) {
        this.setState(update(this.state, {
          $set: {
            emailDomain: ""
          }
        }));
        return update(data, {
          email_filter: {
            $push: [this.state.emailDomain]
          }
        });
      }).bind(this));
    }
  },
  createItemDisplay: function() {
    return React.createElement(ListGroup, null, this.props.emails.map((function(email, i) {
      return React.createElement(EmailWhitelistItem, {
        "key": i,
        "email": email,
        "pushUpdates": this.props.pushUpdates
      });
    }).bind(this)));
  },
  render: function() {
    var emptyItemDisplay;
    emptyItemDisplay = React.createElement("p", null, "The whitelist is current empty. All emails will be accepted during registration.");
    return React.createElement("div", null, React.createElement("h4", null, "Email Domain Whitelist"), React.createElement(Panel, null, React.createElement("form", {
      "onSubmit": this.addEmailDomain
    }, React.createElement(Input, {
      "type": "text",
      "addonBefore": "@ Domain",
      "valueLink": this.linkState("emailDomain")
    }), (this.props.emails.length > 0 ? this.createItemDisplay() : emptyItemDisplay))));
  }
});

TeacherManagement = React.createClass({displayName: "TeacherManagement",
  getInitialState: function() {
    return {
      groups: [],
      tabKey: 0
    };
  },
  onTabSelect: function(tab) {
    return this.setState(update(this.state, {
      tabKey: {
        $set: tab
      }
    }));
  },
  componentWillMount: function() {
    return apiCall("GET", "/api/group/list").done((function(resp) {
      return this.setState(update(this.state, {
        groups: {
          $set: resp.data
        }
      }));
    }).bind(this));
  },
  render: function() {
    return React.createElement(TabbedArea, {
      "activeKey": this.state.tabKey,
      "onSelect": this.onTabSelect
    }, this.state.groups.map((function(group, i) {
      return React.createElement(TabPane, {
        "eventKey": i,
        "key": i,
        "tab": group.name
      }, React.createElement(GroupManagement, {
        "key": group.name,
        "gid": group.gid
      }));
    }).bind(this)));
  }
});

$(function() {
  React.render(React.createElement(TeacherManagement, null), document.getElementById("group-management"));
  return $(document).on('shown.bs.tab', 'a[href="#group-management-tab"]', function() {
    React.unmountComponentAtNode(document.getElementById("group-management"));
    return React.render(React.createElement(TeacherManagement, null), document.getElementById("group-management"));
  });
});
