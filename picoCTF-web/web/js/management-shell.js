// Generated by CoffeeScript 1.12.6
var Accordion, Button, ButtonToolbar, Col, Grid, Input, ProblemLoaderTab, Row, ServerForm, ShellServerList, ShellServerTab, Well;

Input = ReactBootstrap.Input;

Button = ReactBootstrap.Button;

ButtonToolbar = ReactBootstrap.ButtonToolbar;

Grid = ReactBootstrap.Grid;

Row = ReactBootstrap.Row;

Col = ReactBootstrap.Col;

Well = ReactBootstrap.Well;

Accordion = ReactBootstrap.Accordion;

ServerForm = React.createClass({displayName: "ServerForm",
  propTypes: {
    "new": React.PropTypes.bool.isRequired,
    refresh: React.PropTypes.func.isRequired,
    server: React.PropTypes.object
  },
  getInitialState: function() {
    var server;
    if (this.props["new"]) {
      server = {
        "host": "",
        "port": 22,
        "username": "",
        "password": "",
        "protocol": "HTTP",
        "name": ""
      };
    } else {
      server = this.props.server;
    }
    return {
      "new": this.props["new"],
      shellServer: server
    };
  },
  notifyAndRefresh: function(data) {
    apiNotify(data);
    return this.props.refresh();
  },
  addServer: function() {
    return apiCall("POST", "/api/admin/shell_servers/add", this.state.shellServer).done(this.notifyAndRefresh);
  },
  deleteServer: function() {
    return apiCall("POST", "/api/admin/shell_servers/remove", {
      "sid": this.state.shellServer.sid
    }).done(this.notifyAndRefresh);
  },
  updateServer: function() {
    return apiCall("POST", "/api/admin/shell_servers/update", this.state.shellServer).done(this.notifyAndRefresh);
  },
  loadProblems: function() {
    return apiCall("POST", "/api/admin/shell_servers/load_problems", {
      "sid": this.state.shellServer.sid
    }).done(this.notifyAndRefresh);
  },
  checkStatus: function() {
    return apiCall("GET", "/api/admin/shell_servers/check_status", {
      "sid": this.state.shellServer.sid
    }).done(function(data) {
      return apiNotify(data);
    });
  },
  updateHost: function(e) {
    var copy;
    copy = this.state.shellServer;
    copy.host = e.target.value;
    return this.setState({
      shellServer: copy
    });
  },
  updateName: function(e) {
    var copy;
    copy = this.state.shellServer;
    copy.name = e.target.value;
    return this.setState({
      shellServer: copy
    });
  },
  updatePort: function(e) {
    var copy;
    copy = this.state.shellServer;
    copy.port = parseInt(e.target.value);
    return this.setState({
      shellServer: copy
    });
  },
  updateUsername: function(e) {
    var copy;
    copy = this.state.shellServer;
    copy.username = e.target.value;
    return this.setState({
      shellServer: copy
    });
  },
  updatePassword: function(e) {
    var copy;
    copy = this.state.shellServer;
    copy.password = e.target.value;
    return this.setState({
      shellServer: copy
    });
  },
  updateProtocol: function(value) {
    var copy;
    copy = this.state.shellServer;
    copy.protocol = value;
    return this.setState({
      shellServer: copy
    });
  },
  render: function() {
    var buttons, hostDescription, nameDescription, passwordDescription, portDescription, protocolDescription, usernameDescription;
    nameDescription = "A unique name given to this shell server.";
    hostDescription = "The host name of your shell server.";
    portDescription = "The port that SSH is running on.";
    usernameDescription = "The username to connect as - Be sure that this user has sudo privileges!";
    passwordDescription = "The password to use for authentication - Be sure that this is password is only used once.";
    protocolDescription = "The web protocol to access the problem files and shell server. This is most often just HTTP.";
    if (this.state["new"]) {
      buttons = React.createElement(ButtonToolbar, {
        "className": "pull-right"
      }, React.createElement(Button, {
        "onClick": this.addServer
      }, "Add"));
    } else {
      buttons = React.createElement(ButtonToolbar, {
        "className": "pull-right"
      }, React.createElement(Button, {
        "onClick": this.updateServer
      }, "Update"), React.createElement(Button, {
        "onClick": this.deleteServer
      }, "Delete"), React.createElement(Button, {
        "onClick": this.loadProblems
      }, "Load Deployment"), React.createElement(Button, {
        "onClick": this.checkStatus
      }, "Check Status"));
    }
    return React.createElement("div", null, (this.props["new"] ? React.createElement(TextEntry, {
      "name": "Name",
      "type": "text",
      "value": this.state.shellServer.name,
      "onChange": this.updateName,
      "description": nameDescription
    }) : React.createElement("span", null)), React.createElement(TextEntry, {
      "name": "Host",
      "type": "text",
      "value": this.state.shellServer.host,
      "onChange": this.updateHost,
      "description": hostDescription
    }), React.createElement(TextEntry, {
      "name": "SSH Port",
      "type": "number",
      "value": this.state.shellServer.port.toString(),
      "onChange": this.updatePort,
      "description": portDescription
    }), React.createElement(TextEntry, {
      "name": "Username",
      "type": "text",
      "value": this.state.shellServer.username,
      "onChange": this.updateUsername,
      "description": usernameDescription
    }), React.createElement(TextEntry, {
      "name": "Password",
      "type": "password",
      "value": this.state.shellServer.password,
      "onChange": this.updatePassword,
      "description": passwordDescription
    }), React.createElement(OptionEntry, {
      "name": "Web Protocol",
      "value": this.state.shellServer.protocol,
      "options": ["HTTP", "HTTPS"],
      "onChange": this.updateProtocol,
      "description": protocolDescription
    }), buttons);
  }
});

ShellServerList = React.createClass({displayName: "ShellServerList",
  getInitialState: function() {
    return {
      shellServers: []
    };
  },
  refresh: function() {
    return apiCall("GET", "/api/admin/shell_servers").done((function(api) {
      return this.setState({
        shellServers: api.data
      });
    }).bind(this));
  },
  componentDidMount: function() {
    return this.refresh();
  },
  createShellServerForm: function(server, i) {
    var header, shellServer;
    if (server === null) {
      shellServer = React.createElement(ServerForm, {
        "new": true,
        "key": i + "new",
        "refresh": this.refresh
      });
      header = React.createElement("div", null, " New Shell Server ");
    } else {
      shellServer = React.createElement(ServerForm, {
        "new": false,
        "server": server,
        "key": server.sid,
        "refresh": this.refresh
      });
      header = React.createElement("div", null, server.name, " - ", server.host);
    }
    return React.createElement(Panel, {
      "bsStyle": "default",
      "eventKey": i,
      "key": i,
      "header": header
    }, shellServer);
  },
  render: function() {
    var serverList;
    serverList = _.map(this.state.shellServers, this.createShellServerForm);
    serverList.push(this.createShellServerForm(null, this.state.shellServers.length));
    return React.createElement(Accordion, {
      "defaultActiveKey": 0
    }, serverList);
  }
});

ProblemLoaderTab = React.createClass({displayName: "ProblemLoaderTab",
  getInitialState: function() {
    return {
      publishedJSON: ""
    };
  },
  handleChange: function(e) {
    return this.setState({
      publishedJSON: e.target.value
    });
  },
  pushData: function() {
    return apiCall("POST", "/api/problems/load_problems", {
      competition_data: this.state.publishedJSON
    }).done((function(data) {
      apiNotify(data);
      return this.clearPublishedJSON();
    }).bind(this));
  },
  clearPublishedJSON: function() {
    return this.setState({
      publishedJSON: ""
    });
  },
  render: function() {
    var publishArea;
    publishArea = React.createElement("div", {
      "className": "form-group"
    }, React.createElement("h4", null, React.createElement(Hint, {
      "text": "This should be the output of running 'shell_manager publish' on your shell server."
    }), "Paste your published JSON here:"), React.createElement(Input, {
      "className": "form-control",
      "type": 'textarea',
      "rows": "10",
      "value": this.state.publishedJSON,
      "onChange": this.handleChange
    }));
    return React.createElement("div", null, React.createElement(Row, null, publishArea), React.createElement(Row, null, React.createElement(ButtonToolbar, null, React.createElement(Button, {
      "onClick": this.pushData
    }, "Submit"), React.createElement(Button, {
      "onClick": this.clearPublishedJSON
    }, "Clear Data"))));
  }
});

ShellServerTab = React.createClass({displayName: "ShellServerTab",
  render: function() {
    return React.createElement(Well, null, React.createElement(Grid, null, React.createElement(Row, null, React.createElement("h4", null, "To add problems, enter your shell server information below.")), React.createElement(Row, null, React.createElement(Col, {
      "md": 6
    }, React.createElement(ShellServerList, null)))));
  }
});
