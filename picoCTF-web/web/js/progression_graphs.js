// Generated by CoffeeScript 1.12.6
var divFromSelector, fillColors, maxValuesFromBucketsExtended, numDataPoints, progressionDataToPoints, scoreboardChartSettings, strokeColors, teamChartSettings, timestampsToBuckets;

numDataPoints = 720;

divFromSelector = function(selector) {
  return _.first($(selector));
};

strokeColors = ["rgba(156,99,169,1)", "rgba(151,187,205,1)", "rgba(230,22,22,1)", "rgba(22,230,57,1)", "rgba(230,22,210,1)", "rgba(220,220,220,1)", "rgba(204,104,0,1)"];

fillColors = ["rgba(156,99,169,0.2)", "rgba(151,187,205,0.2)", "rgba(230,22,22,0.2)", "rgba(22,230,57,0.2)", "rgba(230,22,210,0.2)", "rgba(220,220,220,0.2)", "rgba(204,104,0,0.2)"];

scoreboardChartSettings = {
  pointHitDetectionRadius: 0,
  pointDotRadius: 1,
  scaleShowGridLines: false,
  pointDot: false,
  bezierCurve: false,
  legendTemplate: "<div class=\"row\"> <% for (var i=0; i<datasets.length; i++){%> <span style=\"color:<%=datasets[i].strokeColor%>\" class=\"pad glyphicon glyphicon-user\" aria-hidden=\"true\"></span> <%if(datasets[i].label){%> <%=datasets[i].label%> <%}%> <%}%> </div>"
};

teamChartSettings = {
  pointHitDetectionRadius: 0,
  pointDotRadius: 0,
  scaleShowGridLines: false,
  pointDot: false,
  bezierCurve: false
};

timestampsToBuckets = function(samples, key, min, max, seconds) {
  var bucketNumber, buckets, continuousBucket, i, j, maxBuckets, ref;
  bucketNumber = function(number) {
    return Math.floor((number - min) / seconds);
  };
  continuousBucket = {};
  maxBuckets = bucketNumber(max);
  for (i = j = 0, ref = maxBuckets; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
    continuousBucket[i] = [];
  }
  buckets = _.groupBy(samples, function(sample) {
    return bucketNumber(sample[key]);
  });
  return _.extend(continuousBucket, buckets);
};

maxValuesFromBucketsExtended = function(buckets, sampleKey) {
  var lastInsertedValue, maxValues;
  maxValues = [];
  lastInsertedValue = 0;
  _.each(buckets, function(samples) {
    var maxValue, values;
    values = _.pluck(samples, sampleKey);
    if (values.length > 0) {
      maxValue = _.max(values);
      maxValues.push(maxValue);
      return lastInsertedValue = maxValue;
    } else {
      return maxValues.push(lastInsertedValue);
    }
  });
  return maxValues;
};

progressionDataToPoints = function(data, dataPoints, currentDate) {
  var bucketWindow, dataSets, lastTime, max, min, sortedData;
  if (currentDate == null) {
    currentDate = 0;
  }
  sortedData = _.sortBy(_.flatten(data), function(submission) {
    return submission.time;
  });
  min = _.first(sortedData).time - 60 * 5;
  lastTime = _.last(sortedData).time;
  max = currentDate === 0 ? lastTime : Math.min(lastTime + 3600 * 24, currentDate);
  bucketWindow = Math.max(Math.floor((max - min) / dataPoints), 1);
  dataSets = [];
  _.each(data, function(teamData) {
    var buckets, steps;
    buckets = timestampsToBuckets(teamData, "time", min, max, bucketWindow);
    steps = maxValuesFromBucketsExtended(buckets, "score");
    if (steps.length > dataPoints) {
      steps = _.rest(steps, steps.length - dataPoints);
    }
    return dataSets.push(steps);
  });
  if (dataSets.length > 1) {
    return dataSets;
  } else {
    return _.first(dataSets);
  }
};

this.drawTopTeamsProgressionGraph = function(selector, gid) {
  var div, drawgraph;
  div = divFromSelector(selector);
  drawgraph = function(data) {
    return apiCall("GET", "/api/time", {}).done(function(timedata) {
      var canvas, chart, dataPoints, datasets, i, j, legend, len, points, scoreData, team;
      if (data.data.length >= 2 && $(selector).is(":visible")) {
        scoreData = (function() {
          var j, len, ref, results;
          ref = data.data;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            team = ref[j];
            results.push(team.score_progression);
          }
          return results;
        })();
        if (_.max(_.map(scoreData, function(submissions) {
          return submissions.length;
        })) > 0) {
          dataPoints = progressionDataToPoints(scoreData, numDataPoints, timedata.data);
          datasets = [];
          for (i = j = 0, len = dataPoints.length; j < len; i = ++j) {
            points = dataPoints[i];
            datasets.push({
              label: data.data[i].name,
              data: points,
              pointColor: strokeColors[i % strokeColors.length],
              strokeColor: strokeColors[i % strokeColors.length],
              fillColor: fillColors[i % strokeColors.length]
            });
          }
          data = {
            labels: (function() {
              var k, ref, results;
              results = [];
              for (i = k = 1, ref = numDataPoints; 1 <= ref ? k <= ref : k >= ref; i = 1 <= ref ? ++k : --k) {
                results.push("");
              }
              return results;
            })(),
            datasets: datasets
          };
          $(div).empty();
          canvas = $("<canvas>").appendTo(div);
          canvas.attr('width', $(div).width());
          canvas.attr('height', $(div).height());
          chart = new Chart(_.first(canvas).getContext("2d")).Line(data, scoreboardChartSettings);
          legend = chart.generateLegend();
          return $(div).append(legend);
        }
      }
    });
  };
  if (gid === "public") {
    return apiCall("GET", "/api/stats/top_teams/score_progression", {}).done(drawgraph);
  } else if (gid === "ineligible") {
    return apiCall("GET", "/api/stats/top_teams/score_progression", {
      eligible: false
    }).done(drawgraph);
  } else {
    return apiCall("GET", "/api/stats/group/score_progression", {
      gid: gid
    }).done(drawgraph);
  }
};

this.renderTeamRadarGraph = function(selector, tid) {
  var canvas, chart, div, radarData;
  div = divFromSelector(selector);
  $(div).empty();
  radarData = window.generateRadarData(tid);
  if (radarData.labels.length > 0) {
    canvas = $("<canvas>").appendTo(div);
    canvas.attr('width', $(div).width());
    canvas.attr('height', 400);
    return chart = new Chart(_.first(canvas).getContext("2d")).Radar(radarData);
  } else {
    return $("<p>Waiting for solved problems.</p>").appendTo(div);
  }
};

this.renderTeamProgressionGraph = function(selector, data) {
  var div;
  div = divFromSelector(selector);
  return apiCall("GET", "/api/time", {}).done(function(timedata) {
    var canvas, chart, dataPoints, datasets, i;
    if (data.status === 1) {
      if (data.data.length > 0) {
        dataPoints = progressionDataToPoints([data.data], numDataPoints, timedata.data);
        datasets = [
          {
            label: data.data.name,
            data: dataPoints,
            pointColor: strokeColors[0],
            strokeColor: strokeColors[0],
            fillColor: fillColors[0]
          }
        ];
        data = {
          labels: (function() {
            var j, ref, results;
            results = [];
            for (i = j = 1, ref = numDataPoints; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
              results.push("");
            }
            return results;
          })(),
          datasets: datasets
        };
        $(div).empty();
        canvas = $("<canvas>").appendTo(div);
        canvas.attr('width', $(div).width());
        canvas.attr('height', $(div).height());
        return chart = new Chart(_.first(canvas).getContext("2d")).Line(data, teamChartSettings);
      } else {
        return $(selector).html("<p>You have not solved any enabled problems.</p>");
      }
    } else {
      return $(selector).html("<p>You have not solved any enabled problems.</p>");
    }
  });
};

this.drawTeamProgressionGraph = function(selector, container_selector) {
  return apiCall("GET", "/api/stats/team/score_progression", {}).done(function(data) {
    return renderTeamProgressionGraph(selector, data);
  });
};
