// Generated by CoffeeScript 1.12.6
var Button, ButtonGroup, Col, EmailTab, GeneralTab, Grid, Row, SettingsTab, Well, update;

Well = ReactBootstrap.Well;

ButtonGroup = ReactBootstrap.ButtonGroup;

Button = ReactBootstrap.Button;

Grid = ReactBootstrap.Grid;

Row = ReactBootstrap.Row;

Col = ReactBootstrap.Col;

update = React.addons.update;

GeneralTab = React.createClass({displayName: "GeneralTab",
  propTypes: {
    refresh: React.PropTypes.func.isRequired,
    settings: React.PropTypes.object.isRequired
  },
  getInitialState: function() {
    return this.props.settings;
  },
  toggleFeedbackEnabled: function() {
    return this.setState(update(this.state, {
      $set: {
        enable_feedback: !this.state.enable_feedback
      }
    }));
  },
  updateStartTime: function(value) {
    return this.setState(update(this.state, {
      $set: {
        start_time: {
          $date: value
        }
      }
    }));
  },
  updateEndTime: function(value) {
    return this.setState(update(this.state, {
      $set: {
        end_time: {
          $date: value
        }
      }
    }));
  },
  pushUpdates: function() {
    return apiCall("POST", "/api/admin/settings/change", {
      json: JSON.stringify(this.state)
    }).done((function(data) {
      apiNotify(data);
      return this.props.refresh();
    }).bind(this));
  },
  render: function() {
    var endTimeDescription, feedbackDescription, startTimeDescription;
    feedbackDescription = "Users will be able to review problems when this feature is enabled. The ratings will be available to you on the Problem tab.";
    startTimeDescription = "Before the competition has started, users will be able to register without viewing the problems.";
    endTimeDescription = "After the competition has ended, users will no longer be able to submit keys to the challenges.";
    return React.createElement(Well, null, React.createElement(BooleanEntry, {
      "name": "Receive Problem Feedback",
      "value": this.state.enable_feedback,
      "onChange": this.toggleFeedbackEnabled,
      "description": feedbackDescription
    }), React.createElement(TimeEntry, {
      "name": "Competition Start Time",
      "value": this.state.start_time["$date"],
      "onChange": this.updateStartTime,
      "description": startTimeDescription
    }), React.createElement(TimeEntry, {
      "name": "Competition End Time",
      "value": this.state.end_time["$date"],
      "onChange": this.updateEndTime,
      "description": endTimeDescription
    }), React.createElement(Row, null, React.createElement("div", {
      "className": "text-center"
    }, React.createElement(ButtonToolbar, null, React.createElement(Button, {
      "onClick": this.pushUpdates
    }, "Update")))));
  }
});

EmailTab = React.createClass({displayName: "EmailTab",
  propTypes: {
    refresh: React.PropTypes.func.isRequired,
    emailSettings: React.PropTypes.object.isRequired,
    loggingSettings: React.PropTypes.object.isRequired,
    emailFilterSettings: React.PropTypes.array.isRequired
  },
  getInitialState: function() {
    var settings;
    settings = this.props.emailSettings;
    $.extend(settings, this.props.loggingSettings);
    settings.email_filter = this.props.emailFilterSettings;
    return settings;
  },
  updateSMTPUrl: function(e) {
    return this.setState(update(this.state, {
      $set: {
        smtp_url: e.target.value
      }
    }));
  },
  updateSMTPSecurity: function(e) {
    return this.setState(update(this.state, {
      $set: {
        smtp_security: e.target.value
      }
    }));
  },
  updateSMTPPort: function(e) {
    return this.setState(update(this.state, {
      $set: {
        smtp_port: parseInt(e.target.value)
      }
    }));
  },
  updateUsername: function(e) {
    return this.setState(update(this.state, {
      $set: {
        email_username: e.target.value
      }
    }));
  },
  updatePassword: function(e) {
    return this.setState(update(this.state, {
      $set: {
        email_password: e.target.value
      }
    }));
  },
  updateFromAddr: function(e) {
    return this.setState(update(this.state, {
      $set: {
        from_addr: e.target.value
      }
    }));
  },
  updateFromName: function(e) {
    return this.setState(update(this.state, {
      $set: {
        from_name: e.target.value
      }
    }));
  },
  toggleEnabled: function() {
    return this.setState(update(this.state, {
      $set: {
        enable_email: !this.state.enable_email
      }
    }));
  },
  toggleEmailVerification: function() {
    return this.setState(update(this.state, {
      $set: {
        email_verification: !this.state.email_verification
      }
    }));
  },
  pushUpdates: function(makeChange) {
    var pushData;
    pushData = {
      email: {
        enable_email: this.state.enable_email,
        email_verification: this.state.email_verification,
        smtp_url: this.state.smtp_url,
        smtp_port: this.state.smtp_port,
        email_username: this.state.email_username,
        email_password: this.state.email_password,
        from_addr: this.state.from_addr,
        from_name: this.state.from_name,
        smtp_security: this.state.smtp_security
      },
      logging: {
        admin_emails: this.state.admin_emails
      },
      email_filter: this.state.email_filter
    };
    if (typeof makeChange === "function") {
      pushData = makeChange(pushData);
    }
    return apiCall("POST", "/api/admin/settings/change", {
      json: JSON.stringify(pushData)
    }).done((function(data) {
      apiNotify(data);
      return this.props.refresh();
    }).bind(this));
  },
  render: function() {
    var SMTPDescription, SMTPPortDescription, SMTPSecurityDescription, SMTPSecuritySelect, emailDescription, emailVerificationDescription, fromAddressDescription, fromNameDescription, passwordDescription, securityOptions, usernameDescription;
    emailDescription = "Emails must be sent in order for users to reset their passwords.";
    emailVerificationDescription = "Mandate email verification for new users";
    SMTPDescription = "The URL of the STMP server you are using";
    SMTPPortDescription = "The port of the running SMTP server";
    usernameDescription = "The username of the email account";
    passwordDescription = "The password of the email account";
    fromAddressDescription = "The address that the emails should be sent from";
    fromNameDescription = "The name to use for sending emails";
    SMTPSecurityDescription = "Security employed by the SMTP server";
    if (this.state.smtp_security === "TLS") {
      securityOptions = React.createElement(Input, {
        "type": "select",
        "onChange": this.updateSMTPSecurity,
        "key": "TLS"
      }, React.createElement("option", {
        "value": "TLS"
      }, "TLS"), React.createElement("option", {
        "value": "SSL"
      }, "SSL"));
    } else {
      securityOptions = React.createElement(Input, {
        "type": "select",
        "onChange": this.updateSMTPSecurity,
        "key": "SSL"
      }, React.createElement("option", {
        "value": "SSL"
      }, "SSL"), React.createElement("option", {
        "value": "TLS"
      }, "TLS"));
    }
    SMTPSecuritySelect = React.createElement(Row, null, React.createElement(Col, {
      "md": 4
    }, React.createElement("h4", {
      "className": "pull-left"
    }, React.createElement(Hint, {
      "text": SMTPSecurityDescription
    }), "Security")), React.createElement(Col, {
      "md": 8
    }, securityOptions));
    return React.createElement(Well, null, React.createElement(Row, null, React.createElement(Col, {
      "xs": 6
    }, React.createElement(BooleanEntry, {
      "name": "Send Emails",
      "value": this.state.enable_email,
      "onChange": this.toggleEnabled,
      "description": emailDescription
    }), React.createElement(TextEntry, {
      "name": "SMTP URL",
      "value": this.state.smtp_url,
      "type": "text",
      "onChange": this.updateSMTPUrl,
      "description": SMTPDescription
    }), React.createElement(TextEntry, {
      "name": "SMTP Port",
      "value": this.state.smtp_port,
      "type": "number",
      "onChange": this.updateSMTPPort,
      "description": SMTPPortDescription
    }), React.createElement(TextEntry, {
      "name": "Email Username",
      "value": this.state.email_username,
      "type": "text",
      "onChange": this.updateUsername,
      "description": usernameDescription
    }), React.createElement(TextEntry, {
      "name": "Email Password",
      "value": this.state.email_password,
      "type": "password",
      "onChange": this.updatePassword,
      "description": passwordDescription
    }), React.createElement(TextEntry, {
      "name": "From Address",
      "value": this.state.from_addr,
      "type": "text",
      "onChange": this.updateFromAddr,
      "description": fromAddressDescription
    }), React.createElement(TextEntry, {
      "name": "From Name",
      "value": this.state.from_name,
      "type": "text",
      "onChange": this.updateFromName,
      "description": fromNameDescription
    }), React.createElement(BooleanEntry, {
      "name": "Email Verification",
      "value": this.state.email_verification,
      "onChange": this.toggleEmailVerification,
      "description": emailVerificationDescription
    }), SMTPSecuritySelect, React.createElement(Row, null, React.createElement("div", {
      "className": "text-center"
    }, React.createElement(ButtonToolbar, null, React.createElement(Button, {
      "onClick": this.pushUpdates
    }, "Update"))))), React.createElement(Col, {
      "xs": 6
    }, React.createElement(EmailWhitelist, {
      "pushUpdates": this.pushUpdates,
      "emails": this.props.emailFilterSettings
    }))));
  }
});

SettingsTab = React.createClass({displayName: "SettingsTab",
  getInitialState: function() {
    return {
      settings: {
        start_time: {
          $date: 0
        },
        end_time: {
          $date: 0
        },
        enable_feedback: true,
        email: {
          email_verification: false,
          enable_email: false,
          from_addr: "",
          smtp_url: "",
          smtp_port: 0,
          email_username: "",
          email_password: "",
          from_name: ""
        },
        logging: {
          admin_emails: []
        },
        email_filter: []
      },
      tabKey: "general"
    };
  },
  onTabSelect: function(tab) {
    return this.setState(update(this.state, {
      tabKey: {
        $set: tab
      }
    }));
  },
  refresh: function() {
    return apiCall("GET", "/api/admin/settings").done((function(api) {
      return this.setState(update(this.state, {
        $set: {
          settings: api.data
        }
      }));
    }).bind(this));
  },
  componentDidMount: function() {
    return this.refresh();
  },
  render: function() {
    var generalSettings;
    generalSettings = {
      enable_feedback: this.state.settings.enable_feedback,
      start_time: this.state.settings.start_time,
      end_time: this.state.settings.end_time
    };
    return React.createElement(Well, null, React.createElement(Grid, null, React.createElement(Row, null, React.createElement("h4", null, " Configure the competition settings by choosing a tab below ")), React.createElement(TabbedArea, {
      "activeKey": this.state.tabKey,
      "onSelect": this.onTabSelect
    }, React.createElement(TabPane, {
      "eventKey": 'general',
      "tab": 'General'
    }, React.createElement(GeneralTab, {
      "refresh": this.refresh,
      "settings": generalSettings,
      "key": Math.random()
    })), React.createElement(TabPane, {
      "eventKey": 'email',
      "tab": 'Email'
    }, React.createElement(EmailTab, {
      "refresh": this.refresh,
      "emailSettings": this.state.settings.email,
      "emailFilterSettings": this.state.settings.email_filter,
      "loggingSettings": this.state.settings.logging,
      "key": Math.random()
    })))));
  }
});
