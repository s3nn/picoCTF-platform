// Generated by CoffeeScript 1.12.6
var Col, Glyphicon, Panel, ProblemInfo, ProgressBar, Row, group_request, join_group, join_group_request, leave_group, load_achievement_info, load_group_info, renderAchievementInformation, renderGroupInformation, renderTeamInformation, update;

renderTeamInformation = _.template($("#team-info-template").remove().text());

renderGroupInformation = _.template($("#group-info-template").remove().text());

renderAchievementInformation = _.template($("#achievement-info-template").remove().text());

load_group_info = function() {
  return apiCall("GET", "/api/group/list").done(function(data) {
    switch (data["status"]) {
      case 0:
        apiNotify(data);
        return ga('send', 'event', 'Team', 'GroupLoadFailure', data.message);
      case 1:
        $("#group-info").html(renderGroupInformation({
          data: data.data
        }));
        $("#join-group").on("click", group_request);
        $("#group-request-form").on("submit", join_group_request);
        return $(".leave-group-span").on("click", function(e) {
          return leave_group($(e.target).data("group-name"), $(e.target).data("group-owner"));
        });
    }
  });
};

load_achievement_info = function() {
  return apiCall("GET", "/api/achievements").done(function(data) {
    switch (data['status']) {
      case 0:
        apiNotify(data);
        return ga('send', 'event', 'Achievements', 'LoadFailure', data.message);
      case 1:
        return $("#achievement-info").html(renderAchievementInformation({
          data: data.data
        }));
    }
  });
};

join_group = function(group_name, group_owner) {
  return apiCall("POST", "/api/group/join", {
    "group-name": group_name,
    "group-owner": group_owner
  }).done(function(data) {
    apiNotify(data);
    if (data["status"] === 1) {
      ga('send', 'event', 'Team', 'JoinGroup', 'Success');
      return load_group_info();
    } else {
      return ga('send', 'event', 'Team', 'JoinGroup', 'Failure::' + data.message);
    }
  });
};

leave_group = function(group_name, group_owner) {
  return apiCall("POST", "/api/group/leave", {
    "group-name": group_name,
    "group-owner": group_owner
  }).done(function(data) {
    apiNotify(data);
    if (data["status"] === 1) {
      ga('send', 'event', 'Team', 'LeaveGroup', 'Success');
      return load_group_info();
    } else {
      return ga('send', 'event', 'Team', 'LeaveGroup', 'Failure::' + data.message);
    }
  });
};

group_request = function(e) {
  var form;
  e.preventDefault();
  form = $(this).closest("form");
  return confirmDialog("By joining a class you are allowing the instructor to see individual statistics concerning your team's performance. Are you sure you want to join this class?", "Class Confirmation", "Join", "Cancel", function(e) {
    return form.trigger("submit");
  }, function(e) {
    return ga('send', 'event', 'Team', 'JoinGroup', 'RejectPrompt');
  });
};

join_group_request = function(e) {
  var group_name, group_owner;
  e.preventDefault();
  group_name = $("#group-name-input").val();
  group_owner = $("#group-owner-input").val();
  return join_group(group_name, group_owner);
};

update = React.addons.update;

Panel = ReactBootstrap.Panel;

ProgressBar = ReactBootstrap.ProgressBar;

Glyphicon = ReactBootstrap.Glyphicon;

Row = ReactBootstrap.Row;

Col = ReactBootstrap.Col;

ProblemInfo = React.createClass({displayName: "ProblemInfo",
  getInitialState: function() {
    return {
      solvedProblems: [],
      problems: [],
      team: {},
      user: {}
    };
  },
  componentWillMount: function() {
    apiCall("GET", "/api/team").done((function(api) {
      return this.setState(update(this.state, {
        team: {
          $set: api.data
        }
      }));
    }).bind(this));
    apiCall("GET", "/api/problems").done((function(api) {
      return this.setState(update(this.state, {
        problems: {
          $set: api.data
        }
      }));
    }).bind(this));
    apiCall("GET", "/api/problems/solved").done((function(api) {
      return this.setState(update(this.state, {
        solvedProblems: {
          $set: api.data
        }
      }));
    }).bind(this));
    return apiCall("GET", "/api/user/status").done((function(api) {
      return this.setState(update(this.state, {
        user: {
          $set: api.data
        }
      }));
    }).bind(this));
  },
  render: function() {
    var allProblemsByCategory, categories, glyphs, panelHeader, solvedProblemsByCategory, styles;
    allProblemsByCategory = _.groupBy(this.state.problems, "category");
    solvedProblemsByCategory = _.groupBy(this.state.solvedProblems, "category");
    categories = _.keys(allProblemsByCategory);
    styles = ["success", "info", "primary", "warning", "danger"];
    glyphs = {
      "Cryptography": "/img/lock.svg",
      "Web Exploitation": "/img/browser.svg",
      "Binary Exploitation": "/img/binary.svg",
      "Reverse Engineering": "/img/reversecog.svg",
      "Forensics": "/img/search.svg",
      "Tutorial": "/img/laptop.svg"
    };
    if (this.state.team && this.state.user.username !== this.state.team.team_name && this.state.team.team_name.length > 0) {
      panelHeader = React.createElement("div", null, "Progress Overview ", React.createElement("span", {
        "className": "pull-right"
      }, "Team: ", React.createElement("b", null, this.state.team.team_name)));
    } else {
      panelHeader = React.createElement("div", null, "Progress Overview");
    }
    return React.createElement(Panel, {
      "key": categories,
      "header": panelHeader
    }, categories.map(function(category, i) {
      var currentlySolved;
      currentlySolved = solvedProblemsByCategory[category] ? solvedProblemsByCategory[category].length : 0;
      return React.createElement(Row, {
        "key": i
      }, React.createElement(Col, {
        "xs": 8,
        "sm": 8,
        "md": 6,
        "lg": 8,
        "className": "progress-container"
      }, React.createElement(ProgressBar, {
        "now": currentlySolved,
        "bsStyle": styles[i % styles.length],
        "max": allProblemsByCategory[category].length,
        "label": "%(now)s / %(max)s"
      })), React.createElement(Col, {
        "xs": 4,
        "sm": 4,
        "md": 6,
        "lg": 4,
        "className": "progress-label"
      }, React.createElement("img", {
        "className": "category-icon",
        "src": (glyphs[category] ? glyphs[category] : "/img/laptop.svg")
      }), React.createElement("div", {
        "className": "pull-right"
      }, category)));
    }));
  }
});

$(function() {
  React.render(React.createElement(ProblemInfo, null), document.getElementById("progress-info"));
  load_group_info();
  load_achievement_info();
  return window.drawTeamProgressionGraph("#team-progression-graph", "#team-progression-graph-container");
});
