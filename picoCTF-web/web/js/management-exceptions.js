// Generated by CoffeeScript 1.12.6
var Accordion, Badge, Button, Col, ExceptionTab, Glyphicon, ListGroup, ListGroupItem, Panel;

ListGroupItem = ReactBootstrap.ListGroupItem;

ListGroup = ReactBootstrap.ListGroup;

Accordion = ReactBootstrap.Accordion;

Panel = ReactBootstrap.Panel;

Button = ReactBootstrap.Button;

Glyphicon = ReactBootstrap.Glyphicon;

Col = ReactBootstrap.Col;

Badge = ReactBootstrap.Badge;

ExceptionTab = React.createClass({displayName: "ExceptionTab",
  onDelete: function(exception) {
    return apiCall("POST", "/api/admin/exceptions/dismiss", {
      trace: exception.trace
    }).done(this.props.onExceptionModification());
  },
  createRequestInfo: function(request) {
    if (request) {
      return React.createElement("div", null, React.createElement("h4", null, "Browser information"), React.createElement("p", null, "Version: ", request.browser, " ", request.browser_version), React.createElement("p", null, "Platform: ", request.platform), React.createElement("p", null, "Address: ", request.ip));
    } else {
      return React.createElement("p", null, "No request information available.");
    }
  },
  createUserInfo: function(user) {
    if (user) {
      return React.createElement("div", null, React.createElement("h4", null, "User information"), React.createElement("p", null, "Username: ", user.username), React.createElement("p", null, "Email: ", user.email), React.createElement("p", null, "Team: ", user.team_name));
    } else {
      return React.createElement("p", null, "No user information available.");
    }
  },
  createInfoDisplay: function(exception) {
    return React.createElement("div", null, React.createElement("h3", null, "Exception:"), React.createElement("pre", null, exception.trace), React.createElement(Col, {
      "xs": 6
    }, " ", this.createRequestInfo(exception.request), " "), React.createElement(Col, {
      "xs": 6
    }, " ", this.createUserInfo(exception.user), " "));
  },
  createExceptionItem: function(exception, i) {
    var apiDescription, deleteButton, exceptionHeader, occurencesBadge, time;
    time = React.createElement("small", null, new Date(exception.time["$date"]).toUTCString());
    deleteButton = React.createElement(Glyphicon, {
      "onClick": this.onDelete.bind(this, exception),
      "glyph": "remove"
    });
    occurencesBadge = React.createElement(Badge, null, exception.count);
    apiDescription = exception.request ? React.createElement("span", null, exception.request.api_endpoint_method, " ", React.createElement("b", null, exception.request.api_endpoint)) : React.createElement("span", null, "Internal Exception");
    exceptionHeader = React.createElement("div", null, apiDescription, React.createElement("div", {
      "className": "pull-right"
    }, occurencesBadge, " ", time, " ", deleteButton));
    return React.createElement(Panel, {
      "bsStyle": "default",
      "eventKey": i,
      "key": i,
      "header": exceptionHeader
    }, this.createInfoDisplay(exception));
  },
  render: function() {
    var exceptionDisplay, exceptionList, groupedExceptions, uniqueExceptions;
    if (this.props.exceptions.length > 0) {
      groupedExceptions = _.groupBy(this.props.exceptions, function(exception) {
        return exception.trace;
      });
      uniqueExceptions = _.map(groupedExceptions, function(exceptions, commonTrace) {
        var exception;
        exception = _.first(exceptions);
        exception.count = exceptions.length;
        return exception;
      });
      exceptionList = uniqueExceptions.map(this.createExceptionItem);
      exceptionDisplay = React.createElement(Accordion, {
        "defaultActiveKey": 0
      }, exceptionList);
      return React.createElement("div", null, React.createElement("h3", null, "Displaying the ", this.props.exceptions.length, " most recent exceptions."), exceptionDisplay);
    } else {
      return React.createElement("div", null, React.createElement("h3", null, "No exceptions to display."));
    }
  }
});
