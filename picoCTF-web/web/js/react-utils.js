// Generated by CoffeeScript 1.12.6
var BooleanEntry, Button, Col, EmailWhitelist, EmailWhitelistItem, FormEntry, Glyphicon, Hint, Input, ListGroup, ListGroupItem, OptionEntry, OverlayTrigger, Panel, Row, TextEntry, TimeEntry, Tooltip, update;

Tooltip = ReactBootstrap.Tooltip;

OverlayTrigger = ReactBootstrap.OverlayTrigger;

Input = ReactBootstrap.Input;

Row = ReactBootstrap.Row;

Col = ReactBootstrap.Col;

Button = ReactBootstrap.Button;

Panel = ReactBootstrap.Panel;

ListGroup = ReactBootstrap.ListGroup;

ListGroupItem = ReactBootstrap.ListGroupItem;

Glyphicon = ReactBootstrap.Glyphicon;

update = React.addons.update;

Hint = React.createClass({displayName: "Hint",
  propTypes: {
    text: React.PropTypes.string.isRequired
  },
  render: function() {
    var tooltip;
    tooltip = React.createElement(Tooltip, null, this.props.text);
    return React.createElement(OverlayTrigger, {
      "placement": "top",
      "overlay": tooltip
    }, React.createElement(Glyphicon, {
      "className": "pad",
      "glyph": "question-sign",
      "style": {
        fontSize: "0.8em"
      }
    }));
  }
});

EmailWhitelistItem = React.createClass({displayName: "EmailWhitelistItem",
  propTypes: {
    email: React.PropTypes.string.isRequired,
    pushUpdates: React.PropTypes.func.isRequired
  },
  render: function() {
    var removeEmail;
    removeEmail = this.props.pushUpdates.bind(null, (function(data) {
      return update(data, {
        email_filter: {
          $apply: _.partial(_.without, _, this.props.email)
        }
      });
    }).bind(this));
    return React.createElement(ListGroupItem, null, "*@", this.props.email, React.createElement("span", {
      "className": "pull-right"
    }, React.createElement(Glyphicon, {
      "glyph": "remove",
      "onClick": removeEmail
    })));
  }
});

EmailWhitelist = React.createClass({displayName: "EmailWhitelist",
  mixins: [React.addons.LinkedStateMixin],
  getInitialState: function() {
    return {};
  },
  propTypes: {
    pushUpdates: React.PropTypes.func.isRequired,
    emails: React.PropTypes.array.isRequired
  },
  addEmailDomain: function(e) {
    e.preventDefault();
    if (_.indexOf(this.props.emails, this.state.emailDomain) !== -1) {
      return apiNotify({
        status: 0,
        message: "This email domain has already been whitelisted."
      });
    } else if (_.indexOf(this.state.emailDomain, "@") !== -1) {
      return apiNotify({
        status: 0,
        message: "You should not include '@'. I want the email domain that follows '@'."
      });
    } else if (_.indexOf(this.state.emailDomain, ".") === -1) {
      return apiNotify({
        status: 0,
        message: "Your email domain did not include a '.' as I expected. Please make sure this is an email domain."
      });
    } else {
      return this.props.pushUpdates((function(data) {
        return update(data, {
          email_filter: {
            $push: [this.state.emailDomain]
          }
        });
      }).bind(this));
    }
  },
  createItemDisplay: function() {
    return React.createElement(ListGroup, null, this.props.emails.map((function(email, i) {
      return React.createElement(EmailWhitelistItem, {
        "key": i,
        "email": email,
        "pushUpdates": this.props.pushUpdates
      });
    }).bind(this)));
  },
  render: function() {
    var emptyItemDisplay;
    emptyItemDisplay = React.createElement("p", null, "The whitelist is current empty. All emails will be accepted during registration.");
    return React.createElement("div", null, React.createElement("h4", null, "Email Domain Whitelist"), React.createElement("form", {
      "onSubmit": this.addEmailDomain
    }, React.createElement(Row, null, React.createElement(Input, {
      "type": "text",
      "addonBefore": "@ Domain",
      "valueLink": this.linkState("emailDomain")
    })), React.createElement(Row, null, (this.props.emails.length > 0 ? this.createItemDisplay() : emptyItemDisplay))));
  }
});

FormEntry = React.createClass({displayName: "FormEntry",
  propTypes: {
    name: React.PropTypes.string.isRequired,
    entry: React.PropTypes.object.isRequired,
    description: React.PropTypes.string
  },
  render: function() {
    var hint;
    if (this.props.description) {
      hint = React.createElement(Hint, {
        "text": this.props.description
      });
    } else {
      hint = "";
    }
    return React.createElement(Row, null, React.createElement(Col, {
      "md": 4
    }, React.createElement("h4", {
      "className": "pull-left"
    }, hint, this.props.name)), React.createElement(Col, {
      "md": 8
    }, this.props.entry));
  }
});

TextEntry = React.createClass({displayName: "TextEntry",
  propTypes: {
    name: React.PropTypes.string.isRequired,
    type: React.PropTypes.string.isRequired,
    onChange: React.PropTypes.func.isRequired
  },
  render: function() {
    var input;
    input = React.createElement(Input, {
      "className": "form-control",
      "type": this.props.type,
      "value": this.props.value,
      "onChange": this.props.onChange
    });
    return React.createElement(FormEntry, Object.assign({
      "entry": input
    }, this.props));
  }
});

BooleanEntry = React.createClass({displayName: "BooleanEntry",
  propTypes: {
    name: React.PropTypes.string.isRequired,
    value: React.PropTypes.bool.isRequired,
    onChange: React.PropTypes.func.isRequired
  },
  render: function() {
    var button;
    button = React.createElement(Button, {
      "bsSize": "xsmall",
      "onClick": this.props.onChange
    }, (this.props.value ? "Enabled" : "Disabled"));
    return React.createElement(FormEntry, Object.assign({
      "entry": button
    }, this.props));
  }
});

TimeEntry = React.createClass({displayName: "TimeEntry",
  propTypes: {
    name: React.PropTypes.string.isRequired,
    value: React.PropTypes.number.isRequired,
    onChange: React.PropTypes.func.isRequired
  },
  componentDidMount: function() {
    var date, node;
    date = new Date(this.props.value);
    node = React.findDOMNode(this.refs.datetimepicker);
    return $(node).datetimepicker({
      defaultDate: date,
      inline: true,
      sideBySide: true
    }).on("dp.change", (function(e) {
      return this.props.onChange(e.date.toDate().getTime());
    }).bind(this));
  },
  render: function() {
    var timepicker;
    timepicker = React.createElement(Panel, null, " ", React.createElement("div", {
      "ref": "datetimepicker"
    }), " ");
    return React.createElement(FormEntry, Object.assign({
      "entry": timepicker
    }, this.props));
  }
});

OptionEntry = React.createClass({displayName: "OptionEntry",
  propTypes: {
    name: React.PropTypes.string.isRequired,
    value: React.PropTypes.string.isRequired,
    options: React.PropTypes.array.isRequired,
    onChange: React.PropTypes.func.isRequired
  },
  render: function() {
    var buttonGroup, buttons;
    buttons = _.map(this.props.options, (function(option) {
      var buttonClass, onClick;
      onClick = (function(e) {
        return this.props.onChange(option);
      }).bind(this);
      buttonClass = option === this.props.value ? "active" : "";
      return React.createElement(Button, {
        "onClick": onClick,
        "className": buttonClass
      }, option);
    }).bind(this));
    buttonGroup = React.createElement(ButtonGroup, null, buttons);
    return React.createElement(FormEntry, Object.assign({
      "entry": buttonGroup
    }, this.props));
  }
});
